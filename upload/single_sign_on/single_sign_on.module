<?php
/**
 * @file
 * Adds the link to the module to the administration area.
 */


/**
 * Implements hook_menu().
 */
function single_sign_on_menu() {
   
   global $user;

  // Link to the administration page.
  $items = array();
  $items['admin/config/people/single_sign_on'] = array(
    'title' => 'OneAll Single Sign On',
    'description' => 'Setup OneAll Single Sign On and enable the Social Networks of your choice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'single_sign_on_admin_settings',
    ),
    'access arguments' => array(
      'administer site configuration',
    ),
    'file' => 'single_sign_on.admin.inc'
  );

  $items['ajax/single_sign_on/get_user_sso_token'] = array(
    'title' => '',
    'page callback' => 'single_sign_on_ajax_get_user_sso_token',
    'access callback' => TRUE, // allows access to any user
    'type' => MENU_CALLBACK
  );


  $items['ajax/single_sign_on/get_user_notice'] = array(
    'title' => '',
    'page callback' => 'single_sign_on_ajax_get_user_notice',
    'access callback' => TRUE, // allows access to any user
    'type' => MENU_CALLBACK
  );

  return $items;
}



/**
 * Add a Link to the footer.
 */
function single_sign_on_preprocess_page(&$vars, $hook) {
    if (is_array($vars['page']) && isset($vars['page']) && isset($vars['page']['footer'])) {
        if (isset($vars['page']['footer']['system_powered-by']) && isset($vars['page']['footer']['system_powered-by']['#markup'])) {
            $vars['page']['footer']['system_powered-by']['#markup'] .= '&nbsp; | &nbsp;' . l(t('Single Sign-On'), 'http://www.oneall.com/services/customer-identity-management/single-sign-on/') . ' ' . t('powered by') . ' ' . l('OneAll', 'http://www.oneall.com/');
        }
    }

    $options = array(
    'group' => JS_THEME,
    );
    drupal_add_js(drupal_get_path('module', 'single_sign_on') . '/js/single_sign_on.js', $options);
    drupal_add_js(array('single_sign_on' => array('basepath' => drupal_get_path('module', 'single_sign_on'))), 'setting');
}




/*
 * --------------------------- ----- AJAX ----- ----------------------
 */



// Get user notice.
function single_sign_on_ajax_get_user_notice()
{
    echo drupal_json_encode(single_sign_on_core_display_user_notice());
    die;
}

// Read user token (Ajax, see single_sign_on.js)
function single_sign_on_ajax_get_user_sso_token()
{
    global $user;

    // The user is currently logged in.
    if (!empty($user->uid))
    {
        // Read the user's token.
        $token = single_sign_on_core_get_user_token_information_for_uid($user->uid);

        // We have a session token, refresh it.
        if (!empty($token->sso_session_token))
        {

            // Add log.
            single_sign_on_core_dump('[SSO JS] [UID' . $user->uid . '] Open session found, registering token [' . $token->sso_session_token . ']');

            // Return token.
            echo drupal_json_encode($token->sso_session_token); 
            die;
        }
    }
    // The user is currently not logged in.
    else
    {
        // If this value is in the future, we should not try to login the user with SSO.
        $login_wait = single_sign_on_core_get_login_wait_value_from_cookie();

        // Try to login the user.
        if ($login_wait < time())
        {
            // Add log.
            single_sign_on_core_dump('[SSO JS] No open session found, checking...');

            // Return status.
            echo drupal_json_encode('check_session'); 
            die;
        }
    }

    // No action.
    echo drupal_json_encode('no_token_found'); 
    die;
}



/*
 * --------------------------- ----- HOOK ----- ----------------------
 */


/**
 * Implements hook_help().
 */
function single_sign_on_help($path, $arg)
{
  if ($path == 'admin.help.single_sign_on')
  {
    return t('We are devoted to creating a positive experience for our customers. Feel free to <a href="@oneall_support" target="_blank">request support</a> if you have any questions and/or feedback.', array(
      '@oneall_support' => 'https://support.oneall.com/'
    ));
  }
}


/**
 * Implements hook_page_alter
 */
function single_sign_on_page_alter(&$form)
{
    global $user;

    // Read settings.
    $settings = single_sign_on_core_get_settings();

    // Single Sign-On requires the subdomain.
    if (!empty($settings['api_subdomain']))
    {
        // Embed the library?
        $embed_sso_library = false;

        // The user is logged in.
        if (is_object($user) && !empty($user->uid))
        {
            // Retrieve his SSO session token.
            $token = single_sign_on_core_get_user_token_information_for_uid($user->uid);

            // SSO session token found
            if (! empty ($token->sso_session_token))
            {
               // The library is embedded and used to refresh the token.
               $embed_sso_library = true;
            }
        }
        // User is logged out
        else
        {
            // The library is embedded and used to login the user.
            $embed_sso_library = true;
        }

        // Either logged out, or logged in and having a token
        if ($embed_sso_library)
        {
            // Build SSO JavaScript
            $data = array();
            $data [] = " var have_oa_lib = ((typeof window.oneall !== 'undefined') ? true : false);";
            $data [] = " (function(){if (!have_oa_lib){";
            $data [] = "  var lib = document.createElement('script');";
            $data [] = "  lib.type = 'text/javascript'; lib.async = true;";
            $data [] = "  lib.src = '//" . $settings['api_subdomain'] . ".".SINGLE_SIGN_ON_API_DOMAIN."/socialize/library.js';";
            $data [] = "  var node = document.getElementsByTagName('script')[0];";
            $data [] = "  node.parentNode.insertBefore(lib, node); have_oa_lib = true;";
            $data [] = " }})();";
            $data [] = " var _oneall = (_oneall || []);";


            // Add SSO JavaScript
            $data = implode(PHP_EOL, $data);

            $form['content']['#attached']['js'] = array(
              $data => array(
                'type' => 'inline',
                'scope' => 'footer',
              ),
            );
        }
    }

    // add notice container
    $form['page_bottom']['single_sign_on'] = [
        '#markup' => '<div id="single_sign_on_notice_container"></div>'
    ];
    drupal_add_css(drupal_get_path('module', 'single_sign_on') . '/css/single_sign_on.site.css');
}



/**
 * Implements hook_user_update.
 */
function single_sign_on_user_update($user)
{
    // Add log.
    single_sign_on_core_dump('[PROFILE UPDATE] [UID' . $user->uid . '] Synchronize cloud storage');

    // Read the new password.
    if (isset ($_REQUEST['pass']) && is_array ($_REQUEST['pass']) && ! empty ($_REQUEST['pass']['pass1']))
    {
        $password = $_REQUEST['pass']['pass1'];
    }
    else
    {
        $password = null;
    }

    // Synchronize user to cloud storage.
    $status = single_sign_on_core_synchronize_user_to_cloud_storage ($user, $password);
}


/**
 * Implements hook_form_USER_LOGIN_FORM_alter()
 */
function single_sign_on_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if (!empty($form_state->getUserInput()['name']) && !empty($form_state->getUserInput()['pass']))
    {
        // Form entries.
        $login = $form_state->getUserInput()['name'];
        $password = $form_state->getUserInput()['pass'];

        // Lookup credentials in the cloud storage.
        $result = single_sign_on_core_lookup_user ($login, $password);

        // Cloud storage auth was successfull.
        if ($result->is_successfull === true)
        {
            return $result->user;
        }
    }
}


/**
 * Implements hook_user_login().
 */
function single_sign_on_user_login(&$edit, $account)
{
    // Read the new password.
    if (! empty ($_REQUEST['pass']))
    {
        $password = $_REQUEST['pass'];
    }
    else
    {
        $password = null;
    }

    // Start the single sign-on session when the user logs in.
    $status = single_sign_on_core_start_session_for_user ($account, $password);

    // Remove notices.
    single_sign_on_core_remove_flush_user_notice($account);
}

/**
 * Implements hook_user_logout().
 */
function single_sign_on_user_logout($user)
{
    // Read settings.
    $settings = single_sign_on_core_get_settings();

    // Single Sign-On requires the subdomain.
    if (!empty($settings['api_subdomain']))
    {
        // Destroy session.
        if (!empty($settings['destroy_session_on_logout']))
        {
            // Add log.
            single_sign_on_core_dump('[AUTH CLOSE] [UID' .$user->uid . '] User logout, removing SSO session');

            // End session.
            single_sign_on_core_end_session_for_user($user);
        }
        else
        {
            // Add log.
            single_sign_on_core_dump('[AUTH CLOSE] [UID' .$user->uid . '] User logout, keeping SSO session');
        }

        // Wait until relogging in?
        if (!empty($settings['logout_wait_relogin']) && $settings['logout_wait_relogin'] > 0)
        {
            // Grace period.
            single_sign_on_core_set_login_wait_cookie($settings['logout_wait_relogin']);

            // Add log.
            single_sign_on_core_dump('[AUTH CLOSE] [UID' .$user->uid . '] User logout. No automatic SSO re-login for [' . $settings['logout_wait_relogin'] . '] seconds, until [' . date("d/m/y H:i:s", time() + $settings['logout_wait_relogin']) . ']');
        }
        // No waiting.
        else
        {
            // Remove the cookie.
            single_sign_on_core_unset_login_wait_cookie();
        }
    }
}

/**
 * Implements hook_init().
 */
function single_sign_on_init()
{
    global $user;
    // Read settings.
    $settings = single_sign_on_core_get_settings();
    
    // Check the callback.
    $status = single_sign_on_core_process_callback();

    // Check what needs to be done.
    switch (strtolower($status->action))
    {
        // //////////////////////////////////////////////////////////////////////////
        // No user found and we cannot add users
        // //////////////////////////////////////////////////////////////////////////
        case 'new_user_no_login_autocreate_off':

            // Grace Period
            single_sign_on_core_set_login_wait_cookie($settings['blocked_wait_relogin']);

            // Add log.
            single_sign_on_core_dump('[INIT] @' . $status->action . '] Guest detected but account creation is disabled. Blocking automatic SSO re-login for [' . $settings['blocked_wait_relogin'] . '] seconds, until [' . date("d/m/y H:i:s", $settings['blocked_wait_relogin']) . ']');


            // Are we using HTTPs?
            $is_https = single_sign_on_core_is_https_on();
            $current_uri = single_sign_on_core_get_current_url($is_https);
            drupal_goto($current_uri);

            break;

        // //////////////////////////////////////////////////////////////////////////
        // User found and logged in
        // //////////////////////////////////////////////////////////////////////////

        // Created a new user.
        case 'new_user_created_login':

        // Logged in using the user_token.
        case 'existing_user_login_user_token':

        // Logged in using a verified email address.
        case 'existing_user_login_email_verified':

        // Logged in using an un-verified email address.
        case 'existing_user_login_email_unverified':

            // Add log.
            single_sign_on_core_dump('[INIT] @' . $status->action . ' - User is logged in');

            // Remove cookies.
            single_sign_on_core_unset_login_wait_cookie();

            // Login user.
            $user = user_load($status->user->uid);
            user_login_finalize();

            // Are we using HTTPs?
            $is_https = single_sign_on_core_is_https_on();
            $current_uri = single_sign_on_core_get_current_url($is_https);
            drupal_goto($current_uri);

            break;

        // //////////////////////////////////////////////////////////////////////////
        // User found, but we cannot log him in
        // //////////////////////////////////////////////////////////////////////////

        // User found, but autolink disabled.
        case 'existing_user_no_login_autolink_off':

        // User found, but autolink not allowed.
        case 'existing_user_no_login_autolink_not_allowed':

        // Customer found, but autolink disabled for unverified emails.
        case 'existing_user_no_login_autolink_off_unverified_emails':

            // Grace period.
            single_sign_on_core_set_login_wait_cookie($settings['blocked_wait_relogin']);

            // Add log.
            single_sign_on_core_dump('[INIT] @' . $status->action . '] - Blocking automatic SSO re-login for [' . $settings['blocked_wait_relogin'] . '] seconds, until [' . date("d/m/y H:i:s", $settings['blocked_wait_relogin']) . ']');

            
            // Make sure it's enabled.
            if ( ! empty ($settings['use_account_reminder']))
            {
                // Add a notice for the user.
                single_sign_on_core_enable_user_notice($status->user);

                // Unlog user to not showing logged menu
                module_load_include('pages.inc', 'user');
                user_logout();

            } else {
                
                // No reminder -> reload to prevent user_load to show user logged menu
                // Are we using HTTPs?
                $is_https = single_sign_on_core_is_https_on();
                $current_uri = single_sign_on_core_get_current_url($is_https);
                drupal_goto($current_uri);
            }

            break;

        // //////////////////////////////////////////////////////////////////////////
        // Default
        // //////////////////////////////////////////////////////////////////////////

        // No callback received
        case 'no_callback_data_received':
        default:

            // The user is logged in.
            if (user_is_logged_in())
            {
                // Read the user's token.
                $token = single_sign_on_core_get_user_token_information_for_uid($user->uid);
            
                // We have a valid session token, refresh it.
                if (!empty($token->sso_session_token) && (int)$token->sso_session_token_next_update > time())
                {
                    single_sign_on_core_dump('[INIT] @' . $status->action . '] [UID' . $user->uid . '] - User is logged in, refreshing session token ['.$token->sso_session_token.']');
                }
                else
                {    

                    single_sign_on_core_dump('[INIT] @' . $status->action . '] [UID' . $user->uid . '] - User is logged in but has no sso session token yet - Check for distant sso session');

                    // Check if already logged in user has Cloud Storage user (should have)
                    $cloud_user = single_sign_on_core_get_oasl_identity_for_user_id($user->uid);
                    if (empty($cloud_user)) {

                        // Update user to cloud storage.
                        $cloud_user = single_sign_on_core_synchronize_user_to_cloud_storage ($user, '');

                        // Save Cloud User
                        if ($cloud_user->is_successfull === true)
                        {
                            // Update All token to be up-to-date with OneAll Database
                            single_sign_on_core_add_local_storage_tokens_for_uid($user->uid, $cloud_user->user_token, $cloud_user->identity_token, $cloud_user->provider);
                        }
                    }

                    // Update SSO Token
                    $synchronized_sso_token = single_sign_on_core_get_session_for_identity_token ($cloud_user->identity_token);


                    // Save Cloud User
                    if (!empty($synchronized_sso_token) && $synchronized_sso_token->is_successfull === true)
                    {
                        // Update sso token to be up-to-date with distant OneAll Database
                        single_sign_on_core_add_sso_session_token_to_identity_token($cloud_user->identity_token, $synchronized_sso_token->sso_session_token, $synchronized_sso_token->date_expiration);
                    
                    // No distant SSO token => remove local one
                    } else {
                        single_sign_on_core_delete_sso_session_token_to_identity_token($cloud_user->identity_token);
                    }
                    
                }     
            }
            else
            {
                // If this value is in the future, we should not try to login the user with SSO.
                $login_wait = single_sign_on_core_get_login_wait_value_from_cookie();

                // Wait time exceeded?
                if ($login_wait < time())
                {
                    single_sign_on_core_dump('[INIT] @' . $status->action . ' - User is logged out. Checking for valid SSO session');
                }
                else
                {
                    single_sign_on_core_dump('[INIT] @' . $status->action . ' - User is logged out. Re-login disabled, ' . ($login_wait - time()) . ' seconds remaining');
                }
            }
            break;
    }
}